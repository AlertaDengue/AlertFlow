version: '3'

x-airflow-common:
  &airflow-common
  image: alertflow_base
  environment:
    &airflow-common-env
    AIRFLOW_PROJ_HOST_DIR: ${AIRFLOW_PROJ_HOST_DIR}
    AIRFLOW_HOME: /opt/alertflow
    AIRFLOW_UID: ${AIRFLOW_UID}
    AIRFLOW_GID: ${AIRFLOW_GID}
    _AIRFLOW_WWW_USER_USERNAME: ${_AIRFLOW_WWW_USER_USERNAME}
    _AIRFLOW_WWW_USER_PASSWORD: ${_AIRFLOW_WWW_USER_PASSWORD}
    _AIRFLOW_DB_UPGRADE: 'true'
    _AIRFLOW_WWW_USER_CREATE: 'true'
    AIRFLOW_CONN_POSTGRES_MAIN: ${AIRFLOW_CONN_POSTGRES_MAIN}
  volumes:
    &airflow-common-volumes
    - ${AIRFLOW_PROJ_HOST_DIR}/dags:/opt/alertflow/dags
    - ${AIRFLOW_PROJ_HOST_DIR}/logs:/opt/alertflow/logs
    - ${AIRFLOW_PROJ_HOST_DIR}/plugins:/opt/alertflow/plugins
  user: "${AIRFLOW_UID}:${AIRFLOW_GID}"
  depends_on:
    &airflow-common-depends-on
    core_redis:
      condition: service_healthy
    core_postgres:
      condition: service_healthy

services:
  webserver:
    <<: *airflow-common
    hostname: webserver
    command: airflow webserver
    env_file: ../.env
    environment:
      <<: *airflow-common-env
    ports:
      - 8081:8080
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
      interval: 10s
      timeout: 10s
      retries: 5
    restart: always
    depends_on:
      <<: *airflow-common-depends-on

  core_scheduler:
    <<: *airflow-common
    hostname: scheduler
    command: airflow scheduler
    env_file: ../.env
    environment:
      <<: *airflow-common-env
    healthcheck:
      test: ["CMD-SHELL", 'airflow jobs check --job-type SchedulerJob --hostname "$${HOSTNAME}"']
      interval: 10s
      timeout: 10s
      retries: 5
    restart: always
    depends_on:
      <<: *airflow-common-depends-on

  core_worker:
    <<: *airflow-common
    hostname: worker
    command: airflow celery worker
    env_file: ../.env
    healthcheck:
      test:
        - "CMD-SHELL"
        - 'celery --app airflow.executors.celery_executor.app inspect ping -d "celery@$${HOSTNAME}"'
      interval: 10s
      timeout: 10s
      retries: 5
    environment:
      <<: *airflow-common-env
      # Required to handle warm shutdown of the celery workers properly
      # See https://airflow.apache.org/docs/docker-stack/entrypoint.html#signal-propagation
      DUMB_INIT_SETSID: "0"
    restart: always
    depends_on:
      <<: *airflow-common-depends-on

  core_triggerer:
    <<: *airflow-common
    hostname: triggerer
    command: airflow triggerer
    env_file: ../.env
    environment:
      <<: *airflow-common-env
    healthcheck:
      test: ["CMD-SHELL", 'airflow jobs check --job-type TriggererJob --hostname "$${HOSTNAME}"']
      interval: 10s
      timeout: 10s
      retries: 5
    restart: always
    depends_on:
      <<: *airflow-common-depends-on

  core_postgres:
    image: postgres:13
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
    volumes:
      - postgres-db-volume:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "airflow"]
      interval: 5s
      retries: 5
    restart: always

  core_redis:
    image: redis:latest
    expose:
      - 6379
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 30s
      retries: 50
    restart: always

  # You can enable flower by adding "--profile flower" option e.g. docker-compose --profile flower up
  # or by explicitly targeted on the command line e.g. docker-compose up flower.
  # See: https://docs.docker.com/compose/profiles/
  core_flower:
    <<: *airflow-common
    command: celery flower
    profiles:
      - flower
    ports:
      - 5556:5555
    environment:
      <<: *airflow-common-env
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:5555/"]
      interval: 10s
      timeout: 10s
      retries: 5
    restart: always
    depends_on:
      <<: *airflow-common-depends-on

volumes:
  postgres-db-volume:
